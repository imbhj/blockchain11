// this는 뭔데 아까부터 나오지?

// this는 함수가 호출될 때, 그 함수와 관련된 문맥을 나타내는 키워드
// this는 함수가 어떤 객체와 관련이 있는지를 알려주는 역할

function 닭둘기 (_날개) {
    this.날개 = _날개
}

const 닭둘기1 = new 닭둘기(2);
// this값은 호출되는 방식에 따라 결정됨

const 비둘기 = {
    날개개수: 2,
    소개: function () {
        console.log(`나는 날개를 ${this.날개개수}만큼 가지고 있어.`);
    }
}

const 소개 = 비둘기.소개
소개(); // 나는 날개를 undefined만큼 가지고 있어.
// 비둘기.소개();

// this는 호출될 때 결정이 됨. => this 바인딩이라고 합니다.
// 브라우저 환경에서는 `window ` 객체를
// Node.js 환경에서는 `global` 객체를 가리킵니다.

const 비둘기1 = {
    날개개수: 2,
    소개: () => {
        console.log(`나는 날개를 ${this.날개개수}만큼 가지고 있어.`);
    }
}

비둘기1.소개() // 나는 날개를 undefined만큼 가지고 있다..

// 화살표 함수는 this를 가지지 않는다.

// javascript는 본질적으로 `객체지향 언어`가 아닙니다.
// javascript는 본질적으로 `프로토타입 언어` 입니다.

// 자바스크립트의 최근 스펙 및 문법 => ES6 이후
// let, const, arrow function(화살표 함수)
// let, const => var(옛날 문법)

// function, var => ES5
// 수많은 사람들이 자바스크립트를 객체지향 언어로 착각하고 있다.
// 프로토타입으로 인해 상속받고 사용할 수 있는데, 이 같은 행위를 객체 지향으로 착각

// 최근의 문법을 활용하여 자스를 객체지향 언어를 사용하도록 '장려'하도록 만든거지,
// 객체 지향 언어가 아님.